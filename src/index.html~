<html>
<head>
<title>Eric Sink</title>
<link rel="alternate" type="application/rss+xml" title="RSS" href="/rss.xml">
<style type="text/css">

img[align=right] 
{
    margin: 1em 0 1em 1em;
}

pre.screen
{
    background-color: tan; 
    padding:0.15in; 
    //border-radius:12pt;
    color:black;
    font-size:9pt;
}

.class_sidebar ul {
    list-style-type:none;
    font-size: 80%;
    font-weight: normal;
    color: black;
    margin: 0;
    padding: 0;
    line-height: 1.5em;
}

.class_sidebar li {
    text-indent: 0;
}

.class_sidebar a {
    display: block;
    width: 190px;
    text-align: left;
    padding: 8px 10px 8px 10px;
    outline: none;
}

.class_sidebar a:link, .class_sidebar  a:visited 
{
    color: black;
    text-decoration:none;
}

.class_sidebar a:hover 
{
    color: gray;
    text-decoration:none;
}

.class_sidebar a:active 
{
    color: gray;
    text-decoration:none;
}

.class_body a 
{
    outline: none;
    text-decoration:underline;
    font-weight: bold;
}

.class_body a:link, .class_body a:visited 
{
    display: inline;    
    color: black;    
    background-color:transparent;    
    text-decoration:underline;
}

.class_body a:hover 
{    
    color: gray;
    background-color:none;
    text-decoration:underline;
}
    
.class_body a:active 
{
    color: gray;
    background-color:none;
    text-decoration:underline;
}

.SiteTitle {font-family: Arial, Helvetica, sans-serif; font-size:36pt}
.Tagline {font-family: Arial, Helvetica, sans-serif}
.ArticleTitle {text-decoration: none; color: black; font-family: Arial, Helvetica, sans-serif; font-weight:bold; font-size:16pt}
.ArticleTitleGreen {text-decoration: none; color: #669900; font-family: Arial, Helvetica, sans-serif; font-weight:bold; font-size:20pt}
.DayPageArticleTitle {text-decoration: none; color: black; font-family: Arial, Helvetica, sans-serif; font-weight:bold; font-size:12pt}
.ArticleDate {color:black; font-family: Arial, Helvetica, sans-serif; font-size:7pt;font-weight:normal}
.LeftSide {font-family: Arial, Helvetica, sans-serif; font-size:10pt}
.Copyright { color:white; font-family: Arial, Helvetica, sans-serif; font-size:7pt }
BLOCKQUOTE {font-family: Arial, Helvetica, sans-serif; font-size:10pt}
P {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
OL {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
UL {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
LI {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
TH {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
TD {font-family: Arial, Helvetica, sans-serif; font-size:11pt}
H1 {font-family:Arial,Helvetica,sans-serif}
H2 {font-family:Arial,Helvetica,sans-serif}
H3 {font-family:Arial,Helvetica,sans-serif}
H4 {font-family:Arial,Helvetica,sans-serif}
H5 {font-family:Arial,Helvetica,sans-serif}
</style>
<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-24709512-1']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script></head>
<body bgcolor="#00244d" >

<table cellspacing="0" cellpadding="0" width="1000" align="center" bgcolor="#00244d" border="0">
    <tr><td width="1000" height="153"><img src="images/princeton.jpg"/></td></tr>
<tr><td height="8" bgcolor="#00244d"></td></tr>
<tr>
<td>
<table cellspacing="0" cellpadding="0" width="1000" border="0" bgcolor="white">
<tr>
<td valign="top" width="210" bgcolor="white">
<table cellspacing="0" cellpadding="0" border="0" >
<tr><td class="LeftSide">
<div id="sidebarcontent" class="class_sidebar">
<br>
<ul>
<li><a href="index.html">Home</a></li>
<li><A href="about_author.html">About Eric</A></li>
<li><a href="http://www.twitter.com/eric_sink">@eric_sink</a></li>
</ul>
<h3>&nbsp;Topics:</h3>
<ul>
<li><A href="mssql_mobile/index.html">SQLite/Mobile for Microsoft Folks</A></li>
<li><a href="vcbe/index.html">Version Control by Example</a></li>
<li><a href="bos/Business_of_Software.html">The Business of Software</a></li>
<li><A href="Marketing_for_Geeks.html">Marketing for Geeks</A></li>
<li><A href="laws/Immutable_Laws_Marketing.html">The 22 Immutable Laws of Marketing</A></li>
<li><a href="tocs/Software_Development.html">Software Development</a></li>
<li><a href="tocs/Laughs.html">Laughs</a></li>
<li><a href="rss.xml">RSS</a></li>
</ul>

</div>
</td></tr>
</table></td>
<td width="8" bgcolor="#00244d">&nbsp;</td>
<td width="21" bgcolor="white">&nbsp;</td>
<td bgcolor="white" valign="top" width="750" >
<div class="class_body">
<table cellspacing="0" cellpadding="0" width="100%" border="0" bgcolor="white">
<tr><td>&nbsp;</td></tr>
<tr><td>

</td></tr><tr><td><span align="right" class=ArticleDate>Monday, 8 September 2014</span><br><a class="ArticleTitleGreen" href="entries/fsharp_sqlite.html">An F# newbie using SQLite</a><br><br></td></tr><tr><td>
<p>Like I said in a tweet on Friday, I'm guessing everybody's first 10,000
lines of F# are crap.  That's a lot of bad code I need to write, so I figure
maybe I better get started.</p>

<p>This blog entry is a journal of my first attempts at using F# to do some
SQLite stuff.  I'm using <a
href="https://github.com/ericsink/SQLitePCL.raw">SQLitePCL.raw</a>, which is a Portable Class Library wrapper (written in C#) allowing .NET developers to call the native SQLite library.
</p>

<p>My program has five "stanzas":</p>

<ul>

<li>
<p>ONE: Open a SQLite database and create a table with two integer columns called a and b.</p>
</li>

<li>
<p>TWO: Insert 16 rows with a going from 1 through 16.</p>
</li>

<li>
<p>THREE: Set column b equal to a squared, and lookup the value of b for a=7.</p>
</li>

<li>
<p>FOUR: Loop over all the rows where b&lt;120 and sum the a values.</p>
</li>

<li>
<p>FIVE: Close the database and print the two results.</p>
</li>

</ul>

<p>I've got three implementations of this program to show you -- one in C# and two in F#.</p>

<h2>C#</h2>

<p>Here's the C# version I started with:</p>

<pre class="screen">
using System;
using System.IO;

using SQLitePCL;

public class foo
{
    // helper functions to check SQLite result codes and throw

    private static bool is_error(int rc)
    {
        return (
                (rc != raw.SQLITE_OK)
                &amp;&amp; (rc != raw.SQLITE_ROW)
                &amp;&amp; (rc != raw.SQLITE_DONE)
           );
    }

    private static void check(int rc)
    {
        if (is_error(rc))
        {
            throw new Exception(string.Format("{0}", rc));
        }
    }

    private static void check(sqlite3 conn, int rc)
    {
        if (is_error(rc))
        {
            throw new Exception(raw.sqlite3_errmsg(conn));
        }
    }

    private static int checkthru(sqlite3 conn, int rc)
    {
        if (is_error(rc))
        {
            throw new Exception(raw.sqlite3_errmsg(conn));
        }
        else
        {
            return rc;
        }
    }

    // MAIN program

    public static void Main()
    {
        sqlite3 conn = null;

        // ONE: open the db and create the table

        check(raw.sqlite3_open(":memory:", out conn));

        check(conn, raw.sqlite3_exec(conn, "CREATE TABLE foo (a int, b int)"));

        // TWO: insert 16 rows

        for (int i=1; i&lt;=16; i++)
        {
            string sql = string.Format("INSERT INTO foo (a) VALUES ({0})", i);
            check(conn, raw.sqlite3_exec(conn, sql));
        }

        // THREE: set b = a squared and find b for a=7

        check(conn, raw.sqlite3_exec(conn, "UPDATE foo SET b = a * a"));

        sqlite3_stmt stmt = null;
        check(conn, raw.sqlite3_prepare_v2(conn, "SELECT b FROM foo WHERE a=?", out stmt));

        check(conn, raw.sqlite3_bind_int(stmt, 1, 7));
        check(conn, raw.sqlite3_step(stmt));
        int vsq = raw.sqlite3_column_int(stmt, 0);
        check(conn, raw.sqlite3_finalize(stmt));
        stmt = null;

        // FOUR: fetch sum(a) for all rows where b &lt; 120

        check(conn, raw.sqlite3_prepare_v2(conn, "SELECT a FROM foo WHERE b&lt;120", out stmt));

        int vsum = 0;

        while (raw.SQLITE_ROW == (checkthru(conn, raw.sqlite3_step(stmt))))
        {
            vsum += raw.sqlite3_column_int(stmt, 0);
        }
        
        check(conn, raw.sqlite3_finalize(stmt));
        stmt = null;

        // FIVE: close and print the results

        check(raw.sqlite3_close(conn));
        conn = null;

        Console.WriteLine("val: {0}", vsq);
        Console.WriteLine("sum: {0}", vsum);
    }
}
</pre>

<p>Notes:</p>

<ul>

<li>
<p>I'm coding against the 'raw' SQLite API, which returns integer error codes
rather than throwing exceptions.  So I've written some little check functions
which throw on any result code that signifies an error condition.</p>
</li>

<li>
<p>In the first stanza, I'm opening ":memory:" rather than an actual file on
disk so that I can be sure the db starts clean.</p>
</li>

<li>
<p>In the second stanza, I'm constructing the SQL string rather than using
parameter substitution.  This is a bad idea for two reasons.  First, parameter
substitution eliminates SQL injection attacks.  Second, forcing SQLite to
compile a SQL statement inside a loop is going to cause poor performance.</p>
</li>

<li>
<p>In the third stanza, I'm going out of my way to do this more properly, using
prepare/bind/step/finalize.  Ironically, this is the case where it doesn't
matter as much, since I'm not looping.</p>
</li>

<li>
<p>In the fourth stanza, I specifically want to loop over the rows in C#
even though I could easily just do the sum in SQL.</p>
</li>

</ul>

<h2>F#, first attempt</h2>

<p>OK, now here's a painfully direct translation of this code to F#:</p>

<pre class="screen">
open SQLitePCL

// helper functions to check SQLite result codes and throw

let is_error rc = 
    (rc &lt;&gt; raw.SQLITE_OK) 
    &amp;&amp; (rc &lt;&gt; raw.SQLITE_ROW) 
    &amp;&amp; (rc &lt;&gt; raw.SQLITE_DONE)

let check1 rc = 
    if (is_error rc) 
    then failwith (sprintf "%d" rc) 
    else ()

let check2 conn rc = 
    if (is_error rc) 
    then failwith (raw.sqlite3_errmsg(conn)) 
    else ()

let checkthru conn rc = 
    if (is_error rc) 
    then failwith (raw.sqlite3_errmsg(conn)) 
    else rc

// MAIN program

// ONE: open the db and create the table

let (rc,conn) = raw.sqlite3_open(":memory:") 
check1 rc

check2 conn (raw.sqlite3_exec (conn, "CREATE TABLE foo (a int, b int)"))

// TWO: insert 16 rows

for i = 1 to 16 do 
    let sql = (sprintf "INSERT INTO foo (a) VALUES (%d)" i)
    check2 conn (raw.sqlite3_exec (conn, sql ))

// THREE: set b = a squared and find b for a=7

check2 conn (raw.sqlite3_exec (conn, "UPDATE foo SET b = a * a"))

let rc2,stmt = raw.sqlite3_prepare_v2(conn, "SELECT b FROM foo WHERE a=?")
check2 conn rc2

check2 conn (raw.sqlite3_bind_int(stmt, 1, 7))
check2 conn (raw.sqlite3_step(stmt))
let vsq = raw.sqlite3_column_int(stmt, 0)
check2 conn (raw.sqlite3_finalize(stmt))

// FOUR: fetch sum(a) for all rows where b &lt; 120

let rc3,stmt2 = raw.sqlite3_prepare_v2(conn, "SELECT a FROM foo WHERE b&lt;120")
check2 conn rc3

let mutable vsum = 0

while raw.SQLITE_ROW = ( checkthru conn (raw.sqlite3_step(stmt2)) ) do 
    vsum &lt;- vsum + (raw.sqlite3_column_int(stmt2, 0))

check2 conn (raw.sqlite3_finalize(stmt2))

// FIVE: close and print the results

check1 (raw.sqlite3_close(conn))

printfn "val: %d" vsq
printfn "sum: %d" vsum
</pre>

<p>Notes:</p>

<ul>

<li>
<p>The is_error function actually looks kind of elegant to me in this form.  Note
that != is spelled &lt;&gt;.  Also there is no return keyword, as the value of
the last expression just becomes the return value of the function.</p>
</li>

<li>
<p>The F# way is to use type inference.  For example, in the is_error function, the rc parameter is strongly typed as an integer even though I haven't declared it that way.  The F# compiler looks at the function and sees that I am comparing the parameter against raw.SQLITE_OK, which is an integer, therefore rc must be an integer as well.  F# does have a syntax for declaring the type explicitly, but this is considered bad practice.</p>
</li>

<li>
<p>The check2 and checkthru functions are identical except that one returns the
unit type (which is kind of like void) and
the other passes the integer argument through.  In C# this wouldn't matter and
I could have just had the check functions return their argument when they don't
throw.  But F# gives warnings ("This expression should have type 'unit', but has type...") for any expression whose values is not used.
</p>
</li>

<li>
<p>In C#, I overloaded check() so that I could sometimes call it with the sqlite3 connection handle and sometimes without.  F# doesn't do function overloading, so I did two versions of the function called check1 and check2.</p>
</li>

<li>
<p>Since raw.sqlite3_open() has an out parameter, F# automatically converts
this to return a tuple with two items (the actual return value is first, and
the value in the out parameter is second).  It took me a little while to figure
out the right syntax to get the two parts into separate variables.</p>
</li>

<li>
<p>It took me even longer to figure out that calling a .NET method in F# uses a
different syntax than calling a regular F# function.  I was just getting used to
the idea that F# wants functions to be called without parens and with the
parameters separated by spaces instead of commas.  But .NET methods are not F#
functions.  The syntax
for calling a .NET method is, well, just like in C#.  Parens and commas.</p> 
</li>

<li>
<p>Here's another way that method calls are different in F#:  When a method call is a
parameter to a regular F# function, you have to enclose it in parens.  That's
why the call to sqlite3_exec() in the first stanza is parenthesized when I pass
it to check2.</p>
</li>

<li>
<p>BTW, one of the first things I did was try to call raw.sqlite3_Open(), just
to verify that F# is case-sensitive.  It is.</p>
</li>

<li>
<p>F# programmers seem to pride themselves on how much they can do in a single line of code, regardless of how long it is.
I originally wrote the second stanza in a single
line.  I only split it up so it would look better here in my blog article.</p>
</li>

<li>
<p>In the third stanza, F# wouldn't let me reuse rc ("Duplicate definition of
value 'rc'") so I had to introduce rc2.</p>
</li>

<li>
<p>In the fourth stanza, I have tried to exactly mimic the behavior of the C#
code, and I think I've succeeded so thoroughly that any real F# programmer will
be tempted to gouge their eyes out when they see it.  I've used mutable and
while/do, both of which are considered a very un-functional way of doing
things.</p>
</li>

<li>
<p>Bottom line:  This code works and it does exactly what the original C# does.
But I named the file fsharp_dreadful.fs because I think that in terms of what is
considered best practices in the F# world, it's probably about as
bad as it can be while still being correct.</p>
</li>

</ul>

<h2>F#, somewhat less csharpy</h2>

<p>Here's an F# version I called fsharp_less_bad.fs.  It's still not very good,
but I've made an attempt to do some things in a more F#-ish way.</p>

<pre class="screen">
open SQLitePCL

// helper functions to check SQLite result codes and throw

let is_error rc = 
    match rc with
    | raw.SQLITE_OK -&gt; false
    | raw.SQLITE_ROW -&gt; false
    | raw.SQLITE_DONE -&gt; false
    | _ -&gt; true

let check1 rc = 
    if (is_error rc) 
    then failwith (sprintf "%d" rc) 
    else ()

let check2 conn rc = 
    if (is_error rc) 
    then failwith (raw.sqlite3_errmsg(conn)) 
    else rc

let checkpair1 pair =
    let rc,result = pair
    check1 rc |&gt; ignore
    result

let checkpair2 conn pair =
    let rc,result = pair
    check2 conn rc |&gt; ignore
    result

// helper functions to wrap method calls in F# functions

let sqlite3_open name = checkpair1 (raw.sqlite3_open(name))
let sqlite3_exec conn sql = check2 conn (raw.sqlite3_exec (conn, sql)) |&gt; ignore
let sqlite3_prepare_v2 conn sql = checkpair2 conn (raw.sqlite3_prepare_v2(conn, sql))
let sqlite3_bind_int conn stmt ndx v = check2 conn (raw.sqlite3_bind_int(stmt, ndx, v)) |&gt; ignore
let sqlite3_step conn stmt = check2 conn (raw.sqlite3_step(stmt)) |&gt; ignore
let sqlite3_finalize conn stmt = check2 conn (raw.sqlite3_finalize(stmt)) |&gt; ignore
let sqlite3_close conn = check1 (raw.sqlite3_close(conn))
let sqlite3_column_int stmt ndx = raw.sqlite3_column_int(stmt, ndx)

// MAIN program

// ONE: open the db and create the table

let conn = sqlite3_open(":memory:")

// use partial application to create an exec function that already 
// has the conn parameter baked in

let exec = sqlite3_exec conn

exec "CREATE TABLE foo (a int, b int)"

// TWO: insert 16 rows

let ins x = 
    exec (sprintf "INSERT INTO foo (a) VALUES (%d)" x)

[1 .. 16] |&gt; List.iter ins

// THREE: set b = a squared and find b for a=7

exec "UPDATE foo SET b = a * a"

let stmt = sqlite3_prepare_v2 conn "SELECT b FROM foo WHERE a=?"
sqlite3_bind_int conn stmt 1 7
sqlite3_step conn stmt
let vsq = sqlite3_column_int stmt 0
sqlite3_finalize conn stmt

// FOUR: fetch sum(a) for all rows where b &lt; 120

let stmt2 = sqlite3_prepare_v2 conn "SELECT a FROM foo WHERE b&lt;120"

let vsum = List.sum [ while 
    raw.SQLITE_ROW = ( check2 conn (raw.sqlite3_step(stmt2)) ) do 
        yield sqlite3_column_int stmt2 0 
    ]

sqlite3_finalize conn stmt2

// FIVE: close and print the results

sqlite3_close conn

printfn "val: %d" vsq
printfn "sum: %d" vsum
</pre>

<p>Notes:</p>

<ul>

<li>
<p>I changed is_error to use pattern matching.  For this very simple situation,
I'm not sure this is an improvement over the simple boolean expression I had
before.</p>
</li>

<li>
<p>I get the impression that typical doctrine in functional programming church is to not use
exceptions, but I'm not tackling that problem here.</p>
</li>

<li>
<p>I got rid of checkthru and just made check2 return its rc paraemter when it doesn't
throw.  This means most of the times I call check2 I have to ignore the result
or else I get a warning.</p>
</li>

<li>
<p>I added a couple of checkpair functions.  These are designed to take a
tuple, such as the one that comes from a .NET method with an out parameter, like sqlite3_open() or sqlite3_prepare_v2().
The checkpair function does the appropriate check function on the first part of
the tuple (the integer return code) and then returns the second part.  The
sort-of clever thing here is that checkpair does not care what type the second
part of the tuple is.  I get the impression that this sort of "things are
generic by default" philosophy is a pillar of functuonal programming.</p>
</li>

<li>
<p>I added several functions which wrap raw.sqlite3_whatever() as a more F#-like function that looks less cluttered.
</p>
</li>

<li>
<p>In the first stanza, after I get the connection open, I define an exec function
using the F# partial application feature.  The exec function is basically just
the sqlite3_exec function except that the conn parameter has already been
baked in.  This allows me to use very readable syntax like <tt>exec "whatever"</tt>.  I considered doing this for all the functions, but I'm
not really sure this design is a good idea.  I just found this hammer called "partial
application" so I was looking for a nail.</p>
</li>

<li>
<p>In the second stanza, I've eliminated the for loop in favor of a list
operation.  I defined a function called ins which inserts one row.  The [1 .. 16] syntax produces a range, which is piped into List.iter.</p>
</li>

<li>
<p>The third stanza looks a lot cleaner with all the .NET method calls hidden
away.</p>
</li>

<li>
<p>In the fourth stanza, I still have a while loop, but I was able to get rid
of mutable.  The syntax I'm using here is (I think) something called a computation
expression.  Basically, the stuff inside the square brackets is constructing a
list with a while loop.  Then List.sum is called on that list, resulting in the
number I want.
</li>

</ul>

<h2>Other notes</h2>

<p>I did all this using the command-line F# tools and Mono on a Mac.
I've got a command called fsharpc on my system.
I'm not sure how it got there, but it probably happened when I installed Xamarin.</p>

<p>Since I'm not using msbuild or NuGet, I just harvested SQLitePCL.raw.dll from the SQLitePCL.raw NuGet
package.  The net45 version is compatible with Mono,
and on a Mac, it will simply P/Invoke from the
SQLite library that comes preinstalled with MacOS X.</p>

<p>So the bash commands to setup my environment for this blog entry looked
something like this:</p>

<pre class="screen">
mkdir fs_sqlite
cd fs_sqlite
mkdir unzipped
cd unzipped
unzip ~/Downloads/sqlitepcl.raw_needy.0.5.0.nupkg 
cd ..
cp unzipped/lib/net45/SQLitePCL.raw.dll .
</pre>

<p>Here are the build commands I used:</p>

<pre class="screen">
fs_sqlite eric$ gmcs -r:SQLitePCL.raw.dll -sdk:4.5 csharp.cs

fs_sqlite eric$ fsharpc -r:SQLitePCL.raw.dll fsharp_dreadful.fs
F# Compiler for F# 3.1 (Open Source Edition)
Freely distributed under the Apache 2.0 Open Source License

fs_sqlite eric$ fsharpc -r:SQLitePCL.raw.dll fsharp_less_bad.fs
F# Compiler for F# 3.1 (Open Source Edition)
Freely distributed under the Apache 2.0 Open Source License

fs_sqlite eric$ ls -l *.exe
-rwxr-xr-x  1 eric  staff   4608 Sep  8 15:30 csharp.exe
-rwxr-xr-x  1 eric  staff   8192 Sep  8 15:30 fsharp_dreadful.exe
-rwxr-xr-x  1 eric  staff  11776 Sep  8 15:31 fsharp_less_bad.exe

fs_sqlite eric$ mono csharp.exe
val: 49
sum: 55

fs_sqlite eric$ mono fsharp_dreadful.exe 
val: 49
sum: 55

fs_sqlite eric$ mono fsharp_less_bad.exe 
val: 49
sum: 55
</pre>

<p>BTW, I noticed that compiling F# (fsharpc) is a LOT slower than compiling C#
(gmcs).</p>

<p>Note that the command-line flag to reference (-r:) an assembly is the same
for F# as it is for C#.</p>

<p>Note that fsharp_dreadful.exe is bigger than csharp.exe, and the
"less_bad" exe is even bigger.  I suspect that generalizing these
observations would be extrapolating from too little data.</p>

<p>C# fans may notice that I [attempted to] put more effort into the F# code.
This was intentional.  Making the C# version beautiful was not the point of
this blog entry.</p>

<p>So far, my favorite site for learning F# has been <a href="http://fsharpforfunandprofit.com/">http://fsharpforfunandprofit.com/</a></p>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Wednesday, 20 August 2014</span><br><a class="ArticleTitleGreen" href="entries/xfzag.html">Xamarin.Forms with Zumero</a><br><br></td></tr><tr><td>
<p>I am a Xamarin fanboy, so my excitement about Xamarin.Forms is perhaps unsurprising.
But I see an awful lot of potential for this technology.  I want to show you some of
the stuff we've been doing with Xamarin.Forms here at Zumero.</p>

<h2>Andrew Jackson in Two Minutes</h2>

<p>First I am going to race through this demo very quickly.  Then I'll circle back around
and explain things.</p>

<h3>STEP ONE:  Download ZAG and run it</h3>

<p>Visit <a
    href="http://zumero.com/dev-center/zss/#zag">http://zumero.com/dev-center/zss/#zag</a>
and download the ZAG application.  For this demo, I'm using ZAG on Mac OS X
(but you could choose Windows or Linux) and I am targetting iOS (but you could
choose Android or Windows Phone).</p>

<p align="center"><img src="entries/xfzag_download.png"/></p>

<p>When you run the app, you should see something like this:</p>

<p align="center"><img src="entries/xfzag_start.png"/></p>

<h3>STEP TWO:  New Database</h3>

<p>Under the "File" menu, choose "New Database...".
You should see this dialog:</p>

<p align="center"><img src="entries/xfzag_new.png"/></p>

<p>Fill in the Server URL and DBFile exactly as shown in the screen shot (Server URL: "http://demo.zumero.com:8080".  DBFile: "demo").  Click the OK button.
You should see a dialog asking you where to save the local copy of the database:</p>

<p align="center"><img src="entries/xfzag_save.png"/></p>

<p>Click OK.  You should see "Syncing with the ZSS Server":</p>

<p align="center"><img src="entries/xfzag_sync.png"/></p>

<p>And when the sync is complete, at the bottom of the ZAG window, you should see "Sync result: 0 (success)".</p>

<!-- <p align="center"><img src="entries/xfzag_result.png"/></p> -->

<h3>STEP THREE:  Generate</h3>

<p>Under the "Generate" menu, find and choose the item labeled "Xamarin.Forms C#":</p>

<p align="center"><img src="entries/xfzag_xfcs.png"/></p>

<p>You will be asked three questions, and you should be able to just click OK on all
three.</p>

<h3>STEP FOUR:  Open the sln file</h3>

<p>You can quit the ZAG application now.  It should have generated a folder somewhere like
<tt>/Users/eric/Documents/demo.zssdemo/</tt>.  Under that folder you should find a
Xamarin solution tree that looks something like this:<p>

<p align="center"><img src="entries/xfzag_finder.png"/></p>

<p>Double-click the demo.sln file to open it in Xamarin Studio.  You should see
four C# projects: a Portable Class Library called "demo.Shared", plus one app
target each for iOS, Android, and Windows Phone 8:</p>

<p align="center"><img src="entries/xfzag_sln.png"/></p>

<h3>STEP FIVE:  Build and run the app</h3>

<p>If you build and run the demo.iOS app in the iPhone simulator, you should
see something like this:</p>

<p align="center"><img src="entries/xfzag_welcome.png"/></p>

<h3>STEP SIX:  Sync</h3>

<p>Click the "Sync" button in the upper right.  You should see:</p>

<p align="center"><img src="entries/xfzag_appsync.png"/></p>

<p>The defaults should be fine.  Just tap the "Sync Now" button.  When the
sync is completed, you should see a list of tables:</p>

<p align="center"><img src="entries/xfzag_tables.png"/></p>

<h3>STEP SEVEN:  Andrew Jackson</h3>

<p>Tap the "presidents" table.  In an iPad instance of the simulator, you would see this:</p>

<p align="center"><img src="entries/xfzag_presidents.png"/></p>

<p>And tap the seventh item.  You should see Andrew Jackson, the only U.S.
president ever to kill someone in a duel:</p>

<p align="center"><img src="entries/xfzag_aj.png"/></p>

<h2>What is ZAG?</h2>

<p>ZAG is short for "ZSS App Generator".  It's a desktop app
which generates ready-to-build source code and build scripts
for mobile apps that sync using ZSS.</p>

<p>We think of ZAG as a way for getting people started faster.
Many people come to our product without much experience in
mobile app development.  ZAG can be used to give them
a starting point, sort of like sample code that is customized
for their data.</p>

<h2>What is Zumero for SQL Server?</h2>

<p>Zumero for SQL Server (ZSS) is a solution for
data sync between SQL Server and mobile devices.</p>

<p>More info from Dan Bricklin about offline in mobile apps: <a href="http://bricklin.com/offline.htm">http://bricklin.com/offline.htm</a></p>

<p>More info about Zumero on our website: <a href="http://zumero.com">zumero.com</a></p>

<p>More info about Zumero from my previous blog entry: <a href="entries/zss1.html">here</a></p>

<h2>What is demo.zumero.com:8080?</h2>

<p>This is a publicly accessible ZSS server provided so that
folks can play with Zumero clients more easily.  It contains
some basic sample data such as U.S. presidents and the
periodic table of the elements.</p>

<p>In real-world scenarios, a customer would use ZAG to generate
their starter app after they have completed setup of their ZSS
server.</p>

<h2>What is Xamarin?</h2>

<p>Xamarin is (IMHO) a <b>great</b> solution for building mobile apps.</p>

<p>One of the main benefits of the Xamarin platform is the ability to
write the non-UI parts of your iOS/Android/WP8 apps in cross-platform 
code while implementing a native user interface for each mobile environment.</p>

<p>But I would use Xamarin even for a single-platform app, simply to get
the benefits of working in .NET/C#.</p>

<p>More info on the Xamarin website: <a href="http://xamarin.com/">http://xamarin.com/</a></p>

<h2>What is Xamarin.Forms?</h2>

<p>Xamarin.Forms is Xamarin's solution for making [most of] your
UI code cross-platform as well, while retaining fully native
performance and feel.</p>

<p>In a nutshell, the coolness of Xamarin.Forms lies in the fact
that in the solution generated by ZAG above, the demo.Shared project is a Portable Class Library
even though it contains the entire user interface for the app.</p>

<p>More info on the Xamarin website: <a href="http://xamarin.com/forms">http://xamarin.com/forms</a></p>

<h2>What is a Portable Class Library (PCL)?</h2>

<p>A PCL is a .NET class library that is annotated with information
about which platforms it should support.  This metadata allows the
tooling to enforce portability rules in both the development and the
consumption of the library.</p>

<p>More info on Scott Hanselman's blog: <a href="http://www.hanselman.com/blog/CrossPlatformPortableClassLibrariesWithNETAreHappening.aspx">http://www.hanselman.com/blog/CrossPlatformPortableClassLibrariesWithNETAreHappening.aspx</a></p>

<p>More info on the Xamarin website: <a href="http://developer.xamarin.com/guides/cross-platform/application_fundamentals/pcl/introduction_to_portable_class_libraries/">http://developer.xamarin.com/guides/cross-platform/application_fundamentals/pcl/introduction_to_portable_class_libraries/</a></p>

<h2>Why does ZAG generate separate projects for iOS, Android, and WinPhone?</h2>

<p>Xamarin.Forms can make <b>most</b> of your UI code portable, but not all of it.
The actual building of the mobile app is specific to each platform.  But
if you look in the code for each of those platform-specific projects,
you'll see that there isn't much there.</p>

<h2>What dependencies does the ZAG-generated app have?</h2>

<p>The following NuGet packages will need to be retrieved:</p>

<ul>
    <li><p>Xamarin.Forms</p></li>
    <li><p>SQLite-net PCL</p></li>
    <li><p>SQLitePCL.raw_basic</p></li>
    <li><p>Zumero</p></li>
</ul>

<h2>What is the "SQLite-net PCL" NuGet package?</h2>

<p>This is the Portable Class Library (PCL) version of SQLite-net,
the popular lightweight SQLite ORM by Frank Krueger (@praeclarum).</p>

<p>More info on GitHub: <a href="https://github.com/praeclarum/sqlite-net">https://github.com/praeclarum/sqlite-net</a></p>

<p>More info on the NuGet website: <a href="https://www.nuget.org/packages/sqlite-net-pcl/">https://www.nuget.org/packages/sqlite-net-pcl/</a></p>

<h2>What is the "SQLitePCL.raw_basic" NuGet package?</h2>

<p>SQLitePCL.raw is my Portable Class Library for accessing
SQLite from C#.</p>

<p>More info on Github: <a href="https://github.com/ericsink/SQLitePCL.raw">https://github.com/ericsink/SQLitePCL.raw</a></p>

<p>More info on the NuGet website: <a href="https://www.nuget.org/packages/SQLitePCL.raw_basic/">https://www.nuget.org/packages/SQLitePCL.raw_basic/</a></p>

<h2>What is SQLite?</h2>

<p>SQLite is the most popular SQLite database for mobile devices.</p>

<p>More info on the SQLite website: <a href="http://sqlite.org/">sqlite.org</a></p>

<h2>What is the "Zumero" NuGet package?</h2>

<p>This is the Zumero Client SDK in the form of a Portable Class Library in a NuGet package.</p>

<p>More info on the Zumero website: <a href="http://zumero.com/dev-center/zss/">http://zumero.com/dev-center/zss/</a></p>

<p>More info on the NuGet website: <a href="https://www.nuget.org/packages/Zumero/">https://www.nuget.org/packages/Zumero/</a></p>

<h2>What do Zumero's client-side SQLite files look like?</h2>

<p>As much as possible, they look exactly like they looked in
SQL Server.</p>

<ul>
    <li><p>Table and column names are the same.</p></li>
    <li><p>All data values are the same (whenever possible).</p></li>
    <li><p>Foreign keys in SQL Server are reconstructed as foreign keys in SQLite.</p></li>
    <li><p>Since SQLite does not perform type checking, Zumero adds constraints to do so.</p></li>
</ul>

<p>And so on...</p>

<h2>What's happening in step two?</h2>

<p>ZAG is acting as a Zumero client and synchronizing the data on the server
into a local SQLite file.  This file is used to obtain information about the
tables and columns necessary to generate the mobile app.</p>

<p>The same sync is happening in step six, except then it is the
mobile app performing the sync instead of ZAG.</p>

<h2>What were those three questions in step three?</h2>

<p>The first one is the project name:</p>

<p align="center"><img src="entries/xfzag_name.png"/></p>

<p>Then ZAG wants to know the settings for your sync server.  These should
already be filled in with the ones you entered earlier:</p>

<p align="center"><img src="entries/xfzag_settings.png"/></p>

<p>Finally, ZAG is asking you where to save the source code and project files
for the app to be generated:</p>

<p align="center"><img src="entries/xfzag_dir.png"/></p>

<h2>Does a ZAG-generated app allow modifications to the data?</h2>

<p>For the Xamarin.Forms C# target, yes.  On the item detail page, 
you should be able to enter new values in text fields and 'Save' the
changes.</p>

<p>But you should get a permission denied error if you try to sync
those changes to our public demo server.  <tt><b>:-)</b></tt></p>

<h2>Is ZAG generating UI stuff as XAML or as C# code?</h2>

<p>Currently, it's XAML.  You'll find the files in the 'xaml' folder
in the demo.Shared project.</p>

<h2>Does ZAG generate polished ready-to-use apps?</h2>

<p>Oh definitely not.  <tt><b>:-)</b></tt></p>

<p>The output of ZAG should build and run with no
errors (if it doesn't, it's a bug, and please let us know), but
it's just a starting point for further development.</p>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Friday, 27 June 2014</span><br><a class="ArticleTitleGreen" href="entries/billion_dollar_apps.html">Billions without Buzz</a><br><br></td></tr><tr><td>
<p>I've been thinking a lot lately about the distorted perspective I get when I
extrapolate from my daily sources of content.</p>

<h2>Using Twitter buzz to sip from a firehose</h2>

<p>I currently follow 304 people on Twitter.  These people are a primary
means for me to hear about stuff that is (1) happening, and (2) important to me.</p>

<p>I rely more on echoes than voices.  For example, I don't follow 
Satya Nadella (@satyanadella).  But whenever he tweets something I would find important, I hear about
it anyway, because a dozen people I do follow are talking about it.</p>

<p>Twitter for me is all about conversations.  It's about
buzz.  I'm interested in what people are talking about.  And I like having
the option of
participating in the chatter.</p>

<p>And the people I choose to follow pretty much cover everything
important.  I don't miss anything that I need to know.</p>

<p>Or do I?</p>

<h2>What am I missing?</h2>

<p>Obviously, my method is designed to exclude information.  Sometimes
my buzz filter works exactly as I want.
I rarely see any tweets about Miley Cyrus.  That is "by design".</p>

<p>I also like the fact that buzz is naturally slanted toward things that are new
even though lots of very important things are old.  (As long as I
don't get confused.  If I extrapolate from buzz with a
black-and-white mentality, I might believe that 
COBOL, SQL, and Subversion are dead because <b>everybody</b> has switched to Java, 
Mongo, and Git.  Older technologies have little or no buzz, but tons of
people are still using them everyday.)</p>

<p>The problem is the stuff that is new and important (to me) but has very
little buzz.  </p>

<h2>The boring wave of B2B apps</h2>

<p>I am absolutely convinced that the B2B wave of mobile apps has barely
started.</p>

<p>As Benedict Evans (@BenedictEvans) says, mobile is <a href="http://ben-evans.com/benedictevans/2013/11/5/mobile-is-eating-the-world-autumn-2013-edition">eating the world</a>.  But so far, most
of the action is with consumers, not businesses.</p>

<p>And this whole wave has been very high-buzz, mostly because everything had
to get bigger, and the stuff that could not was, er, "disrupted".</p>

<p>Add two billion mobile devices to the world and lots of people
are forced to think about scale in a whole new way:</p>

<ul>
    <li><p>Manufacturing.  Foxconn is enormous.  What was the
    biggest manufacturing facility on earth before the iPhone?</p></li>

    <li><p>Venture Capital.  I remember when $100M was an exit.  Now it's a series A.</p></li>

    <li><p>Servers.  Mobile is accelerating the growth of the cloud, served by 
    data centers that make Soldier Field look small.</p></li>

    <li><p>Databases.  When you have 500 million users, you can't afford unique
    constraints and foreign keys in the db layer anymore.</p></li>
</ul>

<p>All this big-ness is causing a lot of disruption.  And buzz.</p>

<p>Meanwhile, the majority of the corporate world is still trying to figure
out what to do about mobile.</p>

<p>Consider this in terms of the classic marketing bell curve:</p>

<p><img src="bell2.gif"/></p>

<ul>
    <li><p> In the consumer world, mobile is
    in the conservatives, and starting to sell to the laggards.  
    </p></li>

    <li><p>In the corporate world, mobile is in the early adopters. It's pre-chasm.  
    </p></li>
</ul>

<p>
    Companies who
    still need high growth to justify their stock price (read: Apple) are distressed about
    the notion that everybody on the planet who can afford a smart phone
    already has one.
    Marketing
    reseach firms are still doing surveys asking corporate IT about when
    they are going to dive into mobile even as my Mom has 
    <b>two</b> tablets.</p>

<p>Has there ever been a technology wave where the consumers
got so far ahead of business?  </p>

<p>I was one of those people in the early
80s who had a computer before they were prevalent in the business world.
But I was a hobbyist and a nerd.  In terms of volume and sheer revenue,
adoption of PCs was driven by companies, not consumers.  They wanted
to run Lotus 1-2-3, so they led the way.  It was a long time before computers
solved real problems for consumers in the way that they solved real
problems for business.  In fact, I'd argue this didn't happen until around
1995 when the Web came along.</p>

<p>In mobile devices, consumers have gotten so far ahead that they have
provided the client side of the infrastructure that Corporate IT will use.  
Going forward, it's going to be BYOD (Bring Your Own Device).
Big companies are not going to buy 10,000 BlackBerries for their workforce
when everybody already has a smart phone.  Instead, they have to figure out
how they're going to securely integrate all these different devices into
their corporate systems (which is why cross-platform is getting even more
important in the mobile space, which is contributing to Xamarin's pursuit of
world domination).  This is not the kind of policy to which Corporate IT is accustomed,  
and that is slowing them down even more.</p>

<p>But this <b>is</b> going to happen.  A lot of enterprise apps are going to get written.</p> 

<p>And this wave will be very low-buzz compared to the "Angry Birds and Candy Crush" wave.  
People won't be talking about it (and even when they do, the sound will get
drowned out by the buzz over the Internet of Things wave).</p>

<p>Quite simply, the B2B apps wave is not interesting enough to get serious buzz:</p>

<ul>
    <li><p>It won't be as disruptive.</p></li>  

    <li><p>It won't re-challenge our notions of scale.  (Walmart's 
2.2 million employees would be a small user base by today's standards.)</p></li>

<li><p>It's going to be built on, and integrated with, technologies that are old.
(Corporate IT 
will prefer to
add mobile <b>incrementally</b>, with as little
change to existing systems as possible.)</p></li>
</ul>

<p>Compared to my first computer(s), an iPhone is a supercomputer.
We are moving into a wave where companies like Procter &amp; Gamble
are going to gain operational efficiency
because all their employees carry supercomputers in their pocket.
And this will be considered boring.</p>

<p>But despite all the yawns, this wave is going to involve a <b>lot</b> of money.  Many billions of dollars
are going to move around as all these enterprise apps get written.</p>

<p>In other words, this is going to be boring in the same way that IBM has been boring
for the last decade.  This week, my Twitter feed is dominated by people
talking about the Google I/O conference.  Nobody is talking
about IBM, even though they have almost twice as much revenue as Google.  
That's how buzz works.</p>

<p>If I want to closely follow something that doesn't have much buzz,
I'm gonna have to work harder.</p>

<h2>Let's talk about Alex Bratton</h2>

<p>I am currently reading a book called <a href="http://www.amazon.com/Billion-Dollar-Apps-Implement-Strategy/dp/0985771097/ref=sr_1_1?s=books&ie=UTF8&qid=1403819480&sr=1-1">Billion Dollar Apps</a>, by Alex Bratton (@alexbratton),
CEO of <a href="http://www.lextech.com/">Lextech</a>, a custom mobile app dev shop in <a href="http://en.wikipedia.org/wiki/My_Kind_of_Town">Chicago</a>.</p>

<p>My buzz filter certainly didn't find this book for me:</p>  

<ul>
    <li><p>@alexbratton has even fewer Twitter followers than I do.</p></li>
    <li><p>@LextechApps has fewer followers than some high school students I know.</p></li>
    <li><p>Almost all of Bratton's followers are people I don't know.</p></li>
    <li><p>Google searches reveal no apparent connection between Lextech and Xamarin.</p></li>
    <li><p>Twitter searches suggest that Bratton and Lextech have seldom or never been mentioned by Scott Hansleman (@shanselman).</p></li>
</ul>

<p>There just aren't many connections between Lextech's world and mine.  In
fact, it looks like maybe I am the only occupant of the overlapping portion of
the Venn diagram.</p>

<p>Maybe Lextech just doesn't have much buzz.
Or maybe Lextech has the kind of buzz that happens mostly off Twitter.  Maybe the CIOs
of Fortune 500 companies share rides on their private jets where they sip Macallan 25 and talk about
how great Lextech is.</p>

<p>Whatever.  I've been following Alex Bratton on Twitter largely because he and I were
students at UIUC around the same time, and I sort-of vaguely remember him.
Were it not for this very thin college connection, I might
never have heard of him or his company or his book.</p>

<p>And that would be sad, because Lextech's activities land squarely in an area
of interest for me.  Bratton's company may be low-buzz, but they're building
B2B mobile apps for banner-name companies including GE, Fidelity, John Deere, Blue Cross, and H&amp;R Block.
They're riding the front of the wave.  I think that's pretty darn cool.</p>

<p>So I am halfway through the book, and two things are already quite clear:</p>

<ul>
    <li><p>The book is really good.</p></li>
    <li><p>I find it boring.</p></li>
</ul>

<p>Basically, I'm not enjoying this book because it was clearly not
written for people like me.
I enjoy fiction books about crime investigation
and books with lots of curly braces and semicolons.  Billion Dollar Apps is
neither of these.  It's written for CxOs at big companies who have to make big
decisions about mobile technology.</p>

<p>But I'm forcing myself to read this book for the same reason I force myself to eat
certain unappealing vegetables.  I don't like the taste, but I think it's good for me.</p>

<p>Thinking about Lextech and its customers is forcing me to widen my
perspective.  It is reminding me that the boredom goes both ways:</p>

<ul>

    <li><p>Most developers don't care about the details of how John Deere is
    using mobile to make its business run better.  They tend to focus more on the
    technology than on solutions to problems.</p></li>

    <li><p>Probably nobody at John Deere is spending their time critiquing the
    design of Xamarin.Forms or figuring out best practices for PCLs.  They see
    mobile technology as a solution to their problems.  </p></li>

</ul>

<p>This book is good because it speaks to its intended
audience, and that group of people doesn't care about the details of why certain
.NET things are incompatible with the AOT compiler in
Xamarin.iOS.  Billion Dollar Apps is a book that talks about sensibly applying mobile technology to make
regular non-geek businesses work better.</p>

<p>Like most other geeks, I am prone to getting lost in technology
for its own sake.  But I'm not just a developer.  I'm an entrepreneur.  I need
to keep a sense of balance.</p>

<p>So, I don't particularly <b>want</b> to read this book, but I <b>need</b> to read it.</p>

<p>Bratton's book is about the beginning of a big boring bazaar where beaucoup billions bounce bereft of buzz.</p>

<p>(Sorry, the forced alliteration was shameful, but I couldn't resist.)</p>

<h2>Bottom line</h2>

<p>I've wandered around a bit, so let me close with a summary of key points
you might take away from this blog entry:</p>

<ul>
    <li>
    <p>
    Consider reading Alex Bratton's book.  

    If you are a CxO of a Fortune 500 company (and you probably are not,
    because you're reading my blog), you'll probably like it.

    If you are a developer (and you probably are, because you're reading my
    blog), you probably won't like it any more than I do.  Eat your brussel
    sprouts.
    </p>
    </li>

    <li>
    <p>Widening your perspective is always good advice.
    If you're like me, there's a really good chance that your daily information flow
    has boundaries.  Those boundaries make you efficient, but they also constantly
    protect you from seeing the perspective of people who are not like you.  Look outside your
    boundaries.</p>
    </li>

    <li>
    <p>If you are interested in the boring B2B wave of mobile apps, so am I.
    Maybe we should talk.  Maybe I should be following you on Twitter.
    Maybe we should see if we can create a little buzz.
    </p>
    </li>

</ul>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Wednesday, 4 June 2014</span><br><a class="ArticleTitleGreen" href="entries/sqlite_pcl_raw_nuget_020.html">SQLitePCL.raw NuGet package, 0.2.0-alpha</a><br><br></td></tr><tr><td>
<p>I have pushed up the second release of the NuGet package(s) for <a href="https://github.com/ericsink/SQLitePCL.raw">SQLitePCL.raw</a>.  There are no API changes, and all tests are passing on all my target platforms (Xamarin.iOS, Xamarin.Android, .NET 4.5, WinRT 8, WinRT 8.1, Windows Phone 8, Windows Phone 8.1 RT, and Windows Phone 8.1 Silverlight).</p>

<h2>Changes in this release</h2>

<ul>
    <li>
    <p>
    Tweak the net45 platform assembly to [hopefully] make it compatible with Mono on non-Windows platforms
    </p>
    </li>
    <li>
    <p>
    Better error messages for build configuration problems
    </p>
    </li>
    <li>
    <p>
    Bundled builds of the sqlite3 library are now compiled with foreign keys defaulting to on
    </p>
    <li>
    <p>
    SQLitePCL.tests, a separate NuGet package containing my test suite in source code form
    </p>
    </li>
    <li>
    <p>
    SQLitePCL.ugly, a separate NuGet package containing the "not-in-C#-style" API which I use
    for writing the test suite
    </p>
    </li>
</ul>

<h2>Changes still coming [soon]</h2>

<ul>
    <li>
    <p>
    A release which is polished enough for real use
    </p>
    </li>
    <li>
    <p>
    Release notes in the nuspec instead of here in a blog entry
    </p>
    </li>
    <li>
    <p>
    Hopefully, automatic insertion of the Visual C++ Runtime SDK reference on RT-ish platforms
    </p>
    </li>
    <li>
    <p>
    Support for <a href="https://github.com/praeclarum/sqlite-net">sqlite-net</a> in a
    NuGet package.  I've been coordinating with @praeclarum and @timheuer on this.  He/they accepted my pull request with the
    necessary changes (thanks!).  And my build system is generating a
    csproj/nuspec for proof of concept purposes.  Almost there.
    </p>
    </li>
    <li>
    <p>
    SQLitePCL.kitchensink, a NuGet package for advanced users, containing all of the configurations
    </p>
    </li>
    <li>
    <p>
    Documentation
    </p>
    </li>
    <li>
    <p>
    Better support for SQLCipher
    </p>
    </li>
</ul>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Friday, 23 May 2014</span><br><a class="ArticleTitleGreen" href="entries/sqlite_pcl_raw_nuget_first.html">First NuGet package for SQLitePCL.raw</a><br><br></td></tr><tr><td>
<h2>What?</h2>

<p>I have pushed up the first NuGet package for <a href="https://github.com/ericsink/SQLitePCL.raw">SQLitePCL.raw</a>.</p>

<h2>Is this ready for use on mission-critical applications?</h2>

<p>Hardly.</p>

<p>I gave this a version number of "0.1.0-alpha".</p>

<p>By including the -alpha part, I signal to NuGet that this is a pre-release package.</p>

<p>By using 0.1.0 as the version number, I signal to human beings that if you
use this package, everything in your
life will go wrong.  Your dog will leave you for someone else.  Your favorite TV
show will get canceled.  A really dumb VC will send you a term sheet.</p>

<p>This is the <i>first</i> NuGet package, not the last.  I gotta start somewhere.</p>

<h2>So this package doesn't work at all?</h2>

<p>Well, actually, no, it shouldn't be <i>that</i> bad.  Underpromise and overdeliver.</p>

<p>I have run my test suite against this package for all of the following environments:</p>

<ul>
    <li><p>Xamarin.iOS (simulator)</p></li>
    <li><p>Xamarin.Android (emulator, API level 15)</p></li>
    <li><p>WinRT 8.1 (x86, on Windows 8.1)</p></li>
    <li><p>Windows Phone 8.0 (in the emulator)</p></li>
    <li><p>Windows Phone 8.1 (RT flavor, in the emulator)</p></li>
    <li><p>Windows Phone 8.1 (Silverlight flavor, in the emulator)</p></li>
    <li><p>.NET 4.5 (on Windows 8.1)</p></li>
</ul>

<p>On all the Windows platforms, the tests all pass.  For iOS and Android, the only
failures are the expected ones.</p>

<h2>Why do some of your tests fail on iOS and Android?</h2>

<p>Because the version of SQLite which is preinstalled by Apple/Google is a bit old,
and some of my tests are explicitly exercising newer SQLite features.</p>

<h2>So is this NuGet package ready for testing?</h2>

<p>Yes, please.</p>

<h2>Eric, I am much smarter than you.  Can I give you some constructive feedback?</h2>

<p>Yes, please.</p>

<h2>Why is the word "basic" in the name of this package?</h2>

<p>I think it likely that I may end up with more than one NuGet package for SQLitePCL.raw.
Different packages for different use cases.  So I need them to have different names.</p>

<p>This one is "basic" in the sense that it tries to be the package that most
people will want to use.  All of the other contemplated packages would have some sort of less-appealing
word in the name, designed to scare people away.  The label for the next one might be "broccoli".</p>

<p>The main tradeoff is the issue of where your app is getting SQLite itself.  For
[much] more detail on this, see my recent blog entry on <a href="entries/multiple_sqlite_problem.html">The Multiple SQLite Problem</a>.</p>

<p>Anyway, for this "basic" package, the iOS and Android assemblies use the
SQLite library which is part of the mobile OS, and all of the Windows
assemblies bundle a sqlite3.dll.</p>

<h2>Which version of SQLite is bundled on the Windows platforms?</h2>

<p>3.8.4.3</p>

<h2>How was the bundled SQLite library compiled?</h2>

<p>With:</p>

<ul>
    <li><p>SQLITE_ENABLE_FTS4</p></li>
    <li><p>SQLITE_ENABLE_FTS3_PARENTHESIS</p></li>
    <li><p>SQLITE_ENABLE_COLUMN_METADATA</p></li>
</ul>

<h2>Can I rely on all future versions of this package having the SQLite library compiled with exactly those options?</h2>

<p>No.</p>

<h2>How do I find this package?</h2>

<p>Direct link: <a href="https://www.nuget.org/packages/SQLitePCL.raw_basic">https://www.nuget.org/packages/SQLitePCL.raw_basic</a></p>

<p>And, it comes up for me if I just <a href="https://www.nuget.org/packages?q=sqlitepcl">search for "SQLitePCL" on NuGet</a>.</p>

<h2>Hey, there are TWO results of that search?  What's the deal?</h2>

<p>Mine is the one called SQLitePCL.raw.  The other one is by MSOpenTech.</p>

<p>And actually, my work is a [hopefully friendly] fork of theirs.  Thanks to
those folks (whoever they are) for a solid starting point.  I am available to
collaborate with them if there is interest.</p>

<h2>Why did you fork the other one?</h2>

<p>See the README <a href="https://github.com/ericsink/SQLitePCL.raw">on GitHub</a> for some info on this.</p>

<h2>Any caveats when trying to use this on iOS?</h2>

<p>AFAIK, no.  For me, this Just Works.</p>

<h2>Any caveats when trying to use this on Android?</h2>

<p>AFAIK, no.  For me, this Just Works.</p>

<h2>Any caveats when trying to use this on .NET 4.5?</h2>

<p>You need to compile for a specific CPU (x86, x64), not "Any CPU".  In Visual Studio, right-click on your solution and choose Configuration Manager.</p>

<h2>Any caveats when trying to use this on Windows Phone 8.0?</h2>

<p>Not really.  Just make sure you are building for x86 for the emulator or ARM for an actual device.  In Visual Studio, right-click on your solution and choose Configuration Manager.</p>

<h2>Any caveats when trying to use this on Windows RT or Windows Phone 8.1?</h2>

<p>Two issues:</p>

<ul>
    <li><p>Build failure:  You need to compile for a specific CPU (x86, x64, ARM), not "Any CPU".  In Visual Studio, right-click on your solution and choose Configuration Manager.</p></li>
    <li><p>Runtime failure, file not found:  You need to add a reference to the Visual C++ 2013 Runtime.  Hopefully a future version of this package will automatically add this reference for you.</p></li>
</ul>

<h2>What other forms of this package are you planning?</h2>

<p>I'm considering one that doesn't bundle any SQLite instances at all.  For use with cases where somebody wants to have their own build of SQLite.  Or for people who want to use the SQLite vsix SDK builds on <a href="http://visualstudiogallery.msdn.microsoft.com/">visualstudiogallery.msdn.microsoft.com</a>.</p>

<h2>Why are some of the platform assemblies in the build directory instead of the lib directory?</h2>

<p>Android and iOS are in lib.</p>

<p>All the Windowsy ones are in build, because they're all CPU-specific, so
they need more help than lib can provide.  An MSBuild .targets file is used to
inject the appropriate reference.</p>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Tuesday, 20 May 2014</span><br><a class="ArticleTitleGreen" href="entries/bad_day.html">Ever have a day like this one?</a><br><br></td></tr><tr><td>
<ul>

    <li>
    <p>
    Check email and notice a message from somebody having trouble using
    SQLitePCL.raw on Windows Phone 8.1.  Realize that I haven't run the test
    suite since I started working on the new build scripts.  Assume that I
    broke something.
    </p>
    </li>

    <li>
    <p>
    Hook up the automated test project to the output of the new build system.
    Sure enough, the tests fail.
    </p>
    </li>

    <li>
    <p>
    Notice that the error message is different from the one in the user's email.
    </p>
    </li>

    <li>
    <p>
    Realize that the user is actually using the old build system, not the new one.
    Wonder how that could have broken.
    </p>
    </li>

    <li>
    <p>
    Bring up the old build system, run the tests.  Yep, they fail here too.  Must
    be something in the actual code.
    </p>
    </li>

    <li>
    <p>
    Dig around for a while and try to find what changed.
    </p>
    </li>

    <li>
    <p>
    Use git to go back to the last commit before I started the new build system
    stuff.  Rebuild all.  Run the tests.  They pass.  Good.  Now I just have to
    diff and figure out which change caused the breakage.
    </p>
    </li>

    <li>
    <p>
    git my working directory back to the current version of the code.  Rebuild all
    and run the tests again to watch them fail again.  BUT NOW THEY PASS.
    </p>
    </li>

    <li>
    <p>
    Wonder if perhaps Visual Studio is less frustrating for people who drink
    Scotch in the mornings.
    </p>
    </li>

    <li>
    <p>
    Decide that maybe something was flaky in my machine.  The tests are passing
    again, so there's no problem.
    </p>
    </li>

    <li>
    <p>
    Realize that the user wasn't actually running the test suite.  He was trying to
    reference from his own project.  And he had to do that manually, because I haven't
    published the nuget package yet.  Maybe he just screwed up the reference or didn't
    copy all the necessary pieces.
    </p>
    </li>

    <li>
    <p>
    Run the tests in the new build system to watch them pass there as well.  But
    here they STILL FAIL.
    </p>
    </li>

    <li>
    <p>
    Decide to take the build system out of the equation and just finish getting things working
    right with nuget.  Build the unit test package separately in its own solution.  Add a reference
    to the nuget package and start working out the issues.
    </p>
    </li>

    <li>
    <p>
    Run the tests.  Everything throws because the reference got added to the "bait" version
    of the PCL instead of the to the WP81 platform assembly.  Oh well.  This is what I need
    to be fixing anyway.
    </p>
    </li>

    <li>
    <p>
    Notice that the .targets file didn't get properly imported into the test project when the
    package was installed.  Wonder why.  But that's gotta be why the platform assembly didn't
    get referenced.
    </p>
    </li>

    <li>
    <p>
    Realize that the bait assembly somehow got referenced.  Wonder why.
    </p>
    </li>

    <li>
    <p>
    What is Scotch anyway?  Go read several articles about single malt whiskey.
    </p>
    </li>

    <li>
    <p>
    Decide to take nuget out of the equation and focus on why the new build system
    is producing dlls that won't load.
    </p>
    </li>

    <li>
    <p>
    Google the error message "Package failed updates, dependency or conflict validation".
    I need to know exactly what was the cause of the failure.
    </p>
    </li>

    <li>
    <p>
    Realize that the default search engine or IE is Bing.  Do the same search in Google.
    Get different results.
    </p>
    </li>

    <li>
    <p>
    Become annoyed when co-worker interrupts me to tell me that there is a new trailer for Guardians of the Galaxy.
    </p>
    </li>

    <li>
    <p>
    Read a web page on the Microsoft website which explains how to get the actual details
    of that error message.  Spend time wandering around Event Viewer until I see the
    right stuff.
    </p>
    </li>

    <li>
    <p>
    Realize that the web page is actually talking about WinRT on the desktop, not Windows Phone.
    </p>
    </li>

    <li>
    <p>
    Try to find a way to get developer-grade error messages in the Windows Phone emulator.
    Fail.
    </p>
    </li>

    <li>
    <p>
    Notice that below the error message, Visual Studio's suggested resolution is to instead use a
    unit test project that is targeted for Windows Phone, even thought IT ALREADY IS.
    </p>
    </li>

    <li>
    <p>
    Blame Steve Ballmer FOR EVERYTHING.
    </p>
    </li>

    <li>
    <p>
    Wonder if WP81 is the only thing that broke.  Run the tests for WinRT.  They fail as well.
    </p>
    </li>

    <li>
    <p>
    Get annoyed because the only way Visual Studio can run the unit tests for
    just one project is to unload all the others.
    </p>
    </li>

    <li>
    <p>
    Get upset because the Visual Studio Reload Project command doesn't work like the way it did
    a week or two ago.  Now it reloads all the projects instead of just the one I wanted.
    Did the installation of the Xamarin Visual Studio integration break it?
    </p>
    </li>

    <li>
    <p>
    Go back to the very basics.  Run the unit tests for plain old .NET 4.5.  They pass.
    </p>
    </li>

    <li>
    <p>
    Re-run the unit tests for WinRT to watch them fail again.  NOW THEY PASS.
    </p>
    </li>

    <li>
    <p>
    Realize the co-worker is absolutely right.  The most important thing is to watch
    the Guardians of the Galaxy trailer.
    </p>
    </li>

    <li>
    <p>
    Get annoyed because the sound on my MBP isn't working.  Watch the whole trailer
    anyway, without sound.
    </p>
    </li>

    <li>
    <p>
    Review all my project settings in the Visual Studio dialogs, just to see if I
    notice anything odd.
    </p>
    </li>

    <li>
    <p>
    Go back to my web browser.  Realize that the world of Scotch whiskey might actually
    be more complicated than Visual Studio.
    </p>
    </li>

    <li>
    <p>
    Go home.  Discover that the annual spring invasion of ants in our kitchen is
    proceeding nicely.
    </p>
    </li>

    <li>
    <p>
    Fight some more with Visual Studio.  Give up.  Go to bed.
    </p>
    </li>

    <li>
    <p>
    Wake up the next morning.  Discover that the teenager's contribution to our
    war against the ants was to leave unrinsed plates by the sink.  Thousands of
    ants feasting on cheesecake debris and syrup.
    </p>
    </li>

    <li>
    <p>
    Open the laptop.  Run diff to compare the csproj and vcxproj files from the old build system
    against the new one.  See that there are no differences that should make any difference.
    </p>
    </li>

    <li>
    <p>
    Change them all anyway.  Update every setting to exactly match the old
    build system.  One at a time.  Run the test suite after each tweak so I can
    figure out exactly which of the seeminlgy-harmless changes caused the
    breakage.
    </p>
    </li>

    <li>
    <p>
    Wait.  My kid had cheesecake and waffles FOR DINNER?
    </p>
    </li>

    <li>
    <p>
    Become seriously annoyed that Visual Studio changes the Output pane
    from "Tests" to "Build" EVERY SINGLE TIME I run the tests.
    </p>
    </li>

    <li>
    <p>
    Finish getting all the settings to match.  The tests still don't pass.
    </p>
    </li>

    <li>
    <p>
    Try to remember if I ever done anything successfully.  Anything at all.
    Distinctly recall that when I was mowing the lawn this weekend, the grass
    got shorter.  Focus on that accomplishment.  Build on that success.
    </p>
    </li>

    <li>
    <p>
    Realize that the old build system works and the new one doesn't.  There has
    to be a difference that I'm missing.  I just have to find it.
    </p>
    </li>

    <li>
    <p>
    Go back to the old build system.  Rebuild all.  Run the tests so I can watch
    them pass and start over from there.  BUT NOW THEY'RE FAILING AGAIN.
    </p>
    </li>

    <li>
    <p>
    Go do something else.
    </p>
    </li>

</ul>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Friday, 16 May 2014</span><br><a class="ArticleTitleGreen" href="entries/multiple_sqlite_problem.html">The Multiple SQLite Problem</a><br><br></td></tr><tr><td>
<h2>Eric, why the #$%! is your SQLite PCL taking so long?</h2>

<p>It's Google's fault.  And Apple's fault.</p>

<h2>Seriously?</h2>

<p>No.  Yes.  Kinda.  Not really.</p>

<h2>The Multiple SQLite Problem, In a Nutshell</h2>

<p>If your app makes use of two separate instances of the SQLite library,
you can end up with a corrupted SQLite data file.</p>

<h2>From the horse's mouth</h2>

<p>On the SQLite website, section 2.2.1 of <a href="http://sqlite.org/howtocorrupt.html">How to Corrupt an SQLite Database File</a> is entitled "Multiple copies of SQLite linked into the same application", and says:</p>

<blockquote>
    As pointed out in the previous paragraph, SQLite takes steps to work around
    the quirks of POSIX advisory locking. Part of that work-around involves
    keeping a global list (mutex protected) of open SQLite database files. But,
    if multiple copies of SQLite are linked into the same application, then
    there will be multiple instances of this global list. Database connections
    opened using one copy of the SQLite library will be unaware of database
    connections opened using the other copy, and will be unable to work around
    the POSIX advisory locking quirks. A close() operation on one connection
    might unknowingly clear the locks on a different database connection,
    leading to database corruption.
</blockquote>

<blockquote>
    The scenario above sounds far-fetched. But the SQLite developers are aware
    of at least one commercial product that was released with exactly this bug.
    The vendor came to the SQLite developers seeking help in tracking down some
    infrequent database corruption issues they were seeing on Linux and Mac.
    The problem was eventually traced to the fact that the application was
    linking against two separate copies of SQLite. The solution was to change
    the application build procedures to link against just one copy of SQLite
    instead of two.
</blockquote>

<p>At its core, SQLite is written in C.  It is plain-old-fashioned
native/umanaged code.  If you are accessing SQLite using C#, you are doing so
through some kind of a wrapper.  That wrapper is loading the SQLite library
from somewhere.  You may not know where.  You probably don't [want to] care.</p>

<p>This is an abstraction.  And it can leak.  C# is putting some distance
between you and the reality of what SQLite really is.  That distance can
somewhat increase the likelihood of you accidentally having two instances
of the SQLite library without even knowing it.</p>

<h2>SQLite as part of the mobile OS</h2>

<p>Both iOS and Android contain an instance of SQLite as part of the basic
operating system.  This is a blessing.  And a curse.</p>

<p>Built-in SQLite is nice because your app doesn't have to include it.
This makes the size of your app smaller.  It avoids the need to compile
SQLite as part of your build process.</p>

<p>But the problem is that the OS has contributed one instance of the
SQLite library that you can't eliminate.  It's always there.  The
multiple SQLite problem cannot happen if only one SQLite is available
to your app.  Anybody or anything which adds one is risking a plurality.</p>

<h2>If SQLite is always in the OS, why not always use it?</h2>

<p>Because Apple and Google do a terrible job of keeping it current.</p>

<ul>
    <li><p>iOS 7 ships with SQLite 3.7.13.  That shipped in June of 2012.</p></li>

    <li><p>Android ships with SQLite 3.7.11.  That shipped in March of 2012.</p></li>

    <li><p>Since Android users never update their devices, a large number of them
    are still running SQLite 3.7.4, which shipped in December of 2010.  (Yes, I know
    the sweeping generalization in the previous sentence is unfair.  I like Android a lot, but I think
    Google's management of the Android world has been bad enough that I'm
    entitled to a little crabbiness.)
    </p></li>
</ul>

<p>If you are targeting Android or iOS and using the built-in SQLite library,
you are missing out on at least TWO YEARS of excellent development work by
DRH and his team.  Current versions of SQLite are significantly faster,
with many bug fixes, and lots of insanely cool new features.  This is just one of the
excellent reasons to bundle a current version of SQLite into your app
instead of using the one in the OS.</p>

<p>And as soon as you do that, there are two instances in play.  You
and Apple/Google have collaborated to introduce the risk of database corruption.</p>

<h2>Windows</h2>

<p>AFAIK, no version of Windows includes a SQLite library.  This is a blessing.
And a curse.  For all of the opposite reasons discussed above.</p>

<p>In general, building a mobile app for Windows (Phone or RT or whatever) means
you have to include SQLite as part of the app.  And when doing so, it certainly
makes sense to just use the latest version.</p>

<p>And that introduces another reason somebody might want to use an
application-private version of SQLite instead of the one built-in to iOS or
Android.  If you're building a cross-platform app, you probably want all
your platforms using the same version of SQLite.  Have fun explaining to your
QA people that your app is built on SQLite 3.8.4 on Windows and 3.7.11 on
Android and 3.7.13 on iOS.</p>

<p>BTW, it's not clear how or if Windows platforms suffer from the data corruption
risk of the multiple SQLite problem.  Given that the DRH explanation talks about
workarounds for quirks in POSIX file locking, it seems likely that the situation
on Windows is different in significant ways.  Nonetheless, even if using multiple
SQLite instances on Windows platforms is safe, it is still wasteful.  And sad.</p>

<h2>SQLCipher or SEE</h2>

<p>Mobile devices get lost or stolen.  
A significant portion of mobile app developers want their data encrypted on
the device.  And the SQLite instance built-in to iOS and Android is plain,
with no support for encryption.</p>

<p>The usual solution to this problem is to use SQLCipher (open source, from
Zetetic) or SEE (proprietary, from the authors of SQLite).  Both of these
are drop-in replacements for SQLite.</p>

<p>In other words, this is yet another reason the OS-provided SQLite
library might not be sufficient.</p>

<h2>SQLite compilation options</h2>

<p>SQLite can be compiled in a lot of different ways.  Do you want the full-text-search feature?
Do you want foreign keys to be default on or off?  What do you want the default thread-safety mode to be?  Do you need the column metadata feature?
Do you need ICU for full Unicode support in collations?  The list goes on and on.</p>

<p>Did Apple or Google compile SQLite with the exact set of build options your app needs?  Maybe.  Or maybe your app just needs to have its own.</p>

<h2>Adding a SQLite instance without knowing it</h2>

<p>Another way to get two SQLite instances is to add a component or library
which includes one.  Even if you don't know.</p>

<p>For example, the client side of <a href="http://zumero.com/">Zumero</a> (our mobile SQL sync product) needs
to call SQLite.  Should it bundle a SQLite library?  Or should it always call
the one in the mobile OS (when available)?</p>

<p>Some earlier versions of the Zumero client SDK included a SQLite instance
in our Xamarin component builds.  Because, why on earth would we want our
code running against the archaic version of SQLite provided by Apple and
Google?</p>

<p>And then we had a customer run into this exact problem.  They called
Zumero for sync.  And they used Mono.Data.Sqlite for building their app.</p>

<p>Now we ship builds which contain no SQLite library instance, because it
minimizes the likelihood of this kind of accident happening.<p>

<p>There are all kinds of libraries and components and SDKs out there which build
on SQLite.  Are they calling the instance provided by the OS?  Or are
they bundling one?  Do you even know?</p>

<h2>So maybe app developers should just be more careful</h2>

<p>Knee-jerk reaction:  Yes, absolutely.</p>

<p>Better answer:  Certainly not.</p>

<p>App developers don't want to think about this stuff.  It's a bit of
esoterica that nobody cares about.  Most people who started reading this
blog entry gave up several paragraphs ago.  The ones that are still here
(both of you) are wondering why you are still reading when right now there are 
seven cable channels showing a rerun of Law and Order.</p>

<h2>An increasingly easy accident</h2>

<p>The multiple SQLite scenario is sounding less far-fetched all the time.
SQLite is now one of the most widely deployed pieces of software in history.
It is incredibly ubiquitous, and still growing.  And people love to build
abstractions on top of it.</p>

<p>This problem is going to get more and more common.</p>

<p>And it can have very significant consequences for end users.</p>

<h2>Think of it this way</h2>

<p>The following requirements are very typical:</p>

<ul>
    <li><p>
    App developers want to be using a current version of SQLite (because DRH has actually been working for the last two years).
    </p></li>

    <li><p>
    App developers want their SQLite data on the mobile device to be encrypted (because even grown-ups lose mobile devices).
    </p></li>

    <li><p>
    App developers want to be using the same version of SQLite on all of their mobile app platforms (because it simplifies testing).
    </p></li>

    <li><p>
    App developers want no risk of data corruption (because end users don't like that kind of thing).
    </p></li>

    <li><p>
    App developers want to work with abstractions, also-known-as ORMs and sync tools, also-known-as things that makes their lives easier (because writing mobile apps is insanely expensive and it is important to reduce development costs).
    </p></li>

    <li><p>
    App developers want to NOT have to think about anything in this blog entry (because they are paid to focus on their actual business, which is medicine or rental cars or construction, and it's 2014, so they shouldn't have to spend any time on the ramifications of quirky POSIX file locking).
    </p></li>

</ul>

<p>Those requirements are not just typical, they are reasonable.  To ask app developers to give up any of these things would be absurd.</p>

<p>And right now, there is NO WAY to satisfy all the requirements above.  In the terminology of high school math, this is a system of equations with no solution.</p>

<h2>To be fair</h2>

<p>The last several weeks of "the NuGet package is almost ready" are also due to some reasons I can't blame Apple or Google or POSIX for.</p>

<p>When I started working on <a href="https://github.com/ericsink/SQLitePCL.raw">SQLitePCL.raw</a>, I didn't know nearly enough about MSBuild or NuGet.  Anything involving native code with NuGet is pretty tricky.  I've spent time climbing the learning curve.  My particular way of learning new technologies is to write the code three times.  The commit history on GitHub contains the whole story.</p>

<h2>Ramifications for SQLitePCL.raw</h2>

<p>I want users of my SQLite PCL to have a great experience, so I'm spending
[perhaps too much] time trying to find the sweetest subsets of the requirements
above.</p>

<p>For example:  C++/CX is actually pretty cool.  I can build a single WP8 component DLL
which is visible to C# while statically building SQLite itself inside.
Fewer pieces.  Fewer dependencies.  Nice.  But if anything else in
the app needs direct access to SQLite, they'll have to include
another instance of the library.  Yuck.</p>

<p>Another example:  I see [at least] three reasonable choices for iOS:</p>

<ul>
    <li><p>Use the SQLite provided by iOS.  It's a shared library.  Access it with P/Invoke, DllImport("sqlite3").</p></li>
    <li><p>Bundle the latest SQLite.  DllImport("__Internal"), and embed a sqlite3.a as a resource and use the MonoTouch LinkWith attribute.</p></li>
    <li><p>Use the Xamarin SQLCipher component.  DllImport("__Internal"), but don't bundle anything, relying on the presence of the SQLCipher component to make the link succeed.</p></li>
</ul>

<p>Which one should the NuGet package assume that people want?  How do people that prefer the others get a path that Just Works?</p>

<h2>So, Eric, when will the SQLitePCL.raw NuGet package be ready</h2>

<p>Soon.  <tt><b>;-)</b></tt></p>

<h2>Bottom line</h2>

<p>"I don't know the key to success, but the key to failure is trying to please everybody."  -- Bill Cosby</p>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Wednesday, 7 May 2014</span><br><a class="ArticleTitleGreen" href="entries/pcl_bait_and_switch.html">Thoughts on the Bait and Switch PCL Trick</a><br><br></td></tr><tr><td>
<p>This blog entry started its life as comments on 
<a href="http://log.paulbetts.org/the-bait-and-switch-pcl-trick/">The Bait and Switch PCL Trick</a>, 
an excellent blog entry by Paul Betts.  </p>

<hr/>

<h2>A little background</h2>

<p>I've been working on a PCL for SQLite.  It's on GitHub:</p>

<p><a href="https://github.com/ericsink/SQLitePCL.raw">https://github.com/ericsink/SQLitePCL.raw</a></p>

<h2>Concerns about the bait-and-switch approach</h2>

<p>(I assume you've read the Paul Betts blog entry as well as the
Daniel Plaisted <a href="http://blogs.msdn.com/b/dsplaisted/archive/2012/08/27/how-to-make-portable-class-libraries-work-for-you.aspx">blog entry</a> linked therein, so I'm not going to re-describe
the Bait and Switch concept from square 1.)</p>

<p>I first heard about "the PCL pattern now known as Bait and Switch" 
several weeks ago in <a href="https://twitter.com/search?q=PCL%20from%3Amigueldeicaza&src=typd">tweets by Miguel de Icaza</a>
which mentioned the efforts of Xamarin guy <a
    href="https://github.com/jamesmontemagno">James Montemagno</a>.</p>

<p>And then the Paul Betts blog entry showed up, which named the pattern
Bait and Switch and proclaimed it to be The Right Way.</p>

<p>Initially, I had concerns.  The technique feels fragile.</p>

<p>(The words "Bait and
Switch" don't really contribute to this feeling (at least for me), especially
after seeing Daniel Plaisted on Twitter saying that "the bait-and-switch concept is fundamental to PCLs, because mscorlib is different everywhere".  Makes sense.)</p>

<p>But the technique still seems deserving of the word "Trick".  The reference assembly (the actual PCL assembly, the one with a
PCL profile) and the platform assemblies don't have much tying them
together.  It seems like the trick is something that just happens to work,
almost by accident, and therefore might stop working later, even though I have no reason to believe that it will.</p>

<p>I'm setting this worry aside because the other PCL approach (dependency injection) contains
a trick which feels just as fragile.  The standard hack is for the PCL assembly
to use reflection to locate and load and instantiate the platform assembly.  This
approach doesn't exactly ooze with robustness either.  And in fact, the Bait and Switch
technique seems to work fine on Xamarin whereas the reflection-load technique does not.
So, both of these approaches might seem fragile, but one of them definitely is.</p>

<h2>Two kinds of PCLs</h2>

<p>If we accept the idea that the Bait and Switch pattern is The Right Way,
then there are several corollaries that follow.</p>

<p>There are two kinds of a PCLs:</p>

<ol>
    <li><p>A PCL which contains only non-portable code.</p></li>

    <li><p>A PCL which contains only portable code.</p></li>
</ol>

<p>There are no PCLs which contain a mixture of the two.</p>

<p>(To be more precise, I am defining "portable code" as code which 
is compiled under a PCL profile, and "non-portable code" is code
which is, er, not compiled under a PCL profile.  I am not claiming 
that a PCL of type (1) is prohibited from using things like 
System.String.Length.  :-) ) </p>

<p>I find it helpful put some separation between these two very different kinds of PCLs and
to explain them as follows.  Perhaps others will find these explanations helpful as well.</p>

<h2>Wrapper PCLs</h2>

<p>For the purpose of this note, I will refer to PCL type (1) as a Wrapper PCL.</p>

<p>A Wrapper PCL is a PCL which exists to provide a portable wrapper around 
something that is not portable.</p>

<p>A Wrapper PCL always uses the Bait and Switch pattern.</p>

<p>We can refer to a Wrapper PCL in the singular, but it is actually multiple
assemblies.  There is the PCL assembly itself (the one that claims to be
portable according to some profile).  And there are platform assemblies,
non-portable assemblies which play the role of the PCL assembly in real
life scenarios.</p>

<p>Any consumer of a Wrapper PCL would need to reference exactly one of its
assemblies.  A library can reference the PCL assembly itself.  An app
must reference one of the platform assemblies.</p>

<p>With a Wrapper PCL, the PCL assembly itself exists only so that libraries
can have something to reference.  It is nothing more than a placeholder.</p>

<p>With a Wrapper PCL, the PCL assembly itself contains only stub functions.  
Those stub functions never get executed.  They might do nothing.  They might
throw.  They might <a href="http://feross.org/gcc-ownage/">launch nethack</a>.  Nobody knows.  Nobody cares.</p>

<p>A Wrapper PCL, despite the presence of "Portable Class Library" in its name,
contains no portable code that ever gets used.</p>

<p>A Wrapper PCL claims a PCL profile (such as profile 78, for example), but
that profile claim is mostly just a list of which platform assemblies 
are supposed to be present in the package.</p>

<p>With a Wrapper PCL, we don't care at all about the fact that our compiler
and tooling can gripe about the use of non-portable things (except of
course to complain if somebody actually does try to launch nethack from
a stub).  There is no portable code being written, so we don't need the
compiler evaluating our ability to write things that are portable.</p>

<p>There is no special tooling to help ensure that all of the assemblies
within a Wrapper PCL actually do implement the same interface, although
it's not hard to figure out ways of making this happen by code sharing
across all the assemblies.</p>

<h2>Feature PCL</h2>

<p>As for PCL type (2) in the list above, I will refer to this as a 
Feature PCL.  </p>

<p>A Feature PCL is a library of portable code.  I'll generously assume
that it has some reason to exist.  It therefore provides some sort of 
functionality.  Or a feature.  So I call it a Feature PCL.</p>

<p>A Feature PCL does not use Bait and Switch.  Or Dependency Injection.  It
has no need for such things.</p>

<p>A Feature PCL is not allowed to have non-portable code in it.  If it did,
it would not be a PCL.  Or it would violate The Right Way, so its offending
non-portable portions should be abstracted out into a separate PCL using
the Bait and Switch pattern.</p>

<p>A Feature PCL is allowed to use things that are allowed by its profile.
Or it is allowed to reference other PCLs that are compatible with that
profile.  It is not allowed to reference anything else.  The compiler
and tooling help ensure this.</p>

<p>A Feature PCL is [conceptually] just one assembly.  It might be implemented
using multiple assemblies.  That's fine.  What is does NOT have are a
set of assemblies that are designed to be alternatives.</p>

<h2>Bottom line</h2>

<p>I'm still exploring and experimenting.  Feedback welcome, but my
blog software doesn't support comments.  I'm @eric_sink on Twitter.  I'll also keep an eye on
the Paul Betts blog entry for any further discussion that happens there.</p>

<p>&nbsp;</p>

<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Friday, 18 April 2014</span><br><a class="ArticleTitleGreen" href="mssql_mobile/unicode.html">Unicode</a><br><br></td></tr><tr><td>
<P>(This entry is part of a <A href="mssql_mobile/index.html">series</A>.  The audience: SQL Server developers.  The topic: SQLite on mobile devices.)</P><hr/>

<h2>Well, Actually</h2>

<p>First, go read <a href="http://tirania.org/blog/archive/2011/Feb-17.html">this blog entry</a> by Miguel de Icaza.  Right now.  I'll wait.</p>

<p>Welcome back.  Now let me apologize.  I don't <i>want</i> to be a pedantic
jerk who quibbles about minor details.  But the topic here is Unicode, so there
really is no other way.</p>

<h2>All Unicode, all the time</h2>

<p>The relevant difference with SQLite is easy to describe:</p>

<ul>
    <li><p>In the world of Windows and SQL Server, you have all kinds of possible code pages.</p></li>
    <li><p>In SQLite, everything is Unicode.</p></li>
</ul>

<p>But if you don't have much context on these issues, I haven't really told you much.  Let's go further.</p>

<h2>But let's not go too far</h2>

<p>I don't want to rewrite articles that have already been written quite well.  So you should probably also go read <a href="http://www.joelonsoftware.com/articles/Unicode.html">this blog entry</a> by Joel Spolsky.  I'll be here when you get back.</p>

<h2>OK, now let's get started</h2>

<p>SQL Server has two basic ways you store text:</p>

<ul>

    <li><p>You can use the char/varchar types, which can be used with one of
    several collations, each of which implies a specific code page, which implies a
    specific character encoding.</p></li>

    <li><p>Or you can use the nchar/nvarchar types (note the extra 'n'), which
    are Unicode.</p></li>

</ul>

<p>SQLite has no such distinction.  All text in SQLite is Unicode.</p>

<h2>What the heck is Unicode again?</h2>

<p>It's a character set: a collection of characters, each with a number that can be
used to refer to it.</p>

<p>More specifically, it's the only character set which is [trying to be] complete.  
If you choose any character set or encoding which is not Unicode, there will be
characters you cannot use.</p>

<h2>And what's an encoding?</h2>

<p>Saying that SQLite uses Unicode doesn't tell you how the text is actually represented.  
Unicode is not an encoding.  It
is more abstract than that.  There are lots of different ways of representing
Unicode as bytes.</p>

<h2>Microsoft's sad history with Unicode</h2>

<p>In the Windows and SQL Server world, there is a long history of encoding
Unicode in 16-bit-ish ways.  Originally, this was UCS-2, a simple encoding
which represents each character as a 16-bit number.  But then the Unicode
consortium realized that 16 bits are not enough, so they expanded the space to 32
bits. This left Microsoft in an awkward spot.  UCS-2 is a fundamentally
defective encoding of Unicode, since there are many characters in Unicode that
simply cannot be represented.</p>  

<p>If the goal of Unicode is to be complete, it is reasonable to say that, well actually, UCS-2
is not Unicode.</p>

<p>The conceptual replacement for UCS-2 is to use 32 bits for every character.
This encoding is called UCS-4 or UTF-32.  But now the wasted space for storing
a simple English string is getting out of hand.  Switching the complete works
of Arthur Conan Doyle from ASCII (which is also an encoding) to UCS-4 would take
four times as much space.</p>

<p>Gradually, the world seems to be adopting UTF-8 as the most
popular Unicode encoding.  This is a variable width encoding.  Sometimes a
single character is represented with just one byte.  Sometimes it needs more.
That's very unfortunate, but the only fixed width alternative is UCS-4,
which is also very unfortunate.  Choose which problem you prefer,
but keep in mind that almost everybody has chosen to accept the problems of
UTF-8.</p>

<p>But Microsoft has so much history with UCS-2 that transitioning everything
to UTF-8 would be really hard.  So they have been moving from UCS-2 to UTF-16,
which is basically a variable width encoding built around a 16-bit unit instead
of an 8-bit unit.  UTF-16 is approximately the worst correct way of representing Unicode, unless you
have invested billions of dollars in the fundamentally broken UCS-2, in which
case UTF-16 is a pretty awesome way out of the mess you ended up in.</p>

<p>Just remember that if you're going out tonight to a club for pedantic nerds and you want to impress someone,
you've got to keep the terminology straight:</p>

<ul>
    <li><p>Unicode is an abstraction, not an encoding, not a code page, not a
    data format, and not a font.</p></li>

    <li><p>Saying your text is Unicode says nothing about how it is represented.
    It might be UTF-8.  It might UTF-16.  It might be code point numbers
    handwritten on Post-It notes stuck on the wall.  All of these are valid
    representations of Unicode.</p></li>

    <li><p>If you ever say anything to suggest that you think Unicode is
    16 bits per character, you will be identified as clueless.</p></li>

    <li><p>If you say that your text is stored in Unicode, you are not entirely incorrect, but people will wonder
    about whether you really know the difference between Unicode and the
    encodings of same.</p></li>
</ul>

<h2>SQLite</h2>

<p>SQLite always uses Unicode to represent text.</p>

<p>(Hopefully you are now screaming at me saying, "Yeah, but which encoding?!?")</p>

<p>The best answer to this question is:  SQLite uses UTF-8.  Forget about everything else.</p>

<p>A more correct answer to this question is:  SQLite uses UTF-8 but also supports UTF-16.</p>

<p>Either way, there is no distinction between char and nchar.  
There is no
way to save storage space in a column by realizing that you only use lower case english characters 
so it's safe to use char instead of nchar.
There are no code pages.  
There
is no way to move your Shift JIS data into SQLite without converting it to Unicode (or storing it as blobs, I suppose).  
</p>

<h2>Summary</h2>

<p>Microsoft has done a lot of things right, but its history with Unicode is
very unfortunate.  And it's not entirely their fault.  They
adopted Unicode early and it changed underneath them.</p>

<p>With respect to its emphasis on UTF-8, SQLite is far more typical of most
non-Microsoft software today.</p>

<p>&nbsp;</p>


<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td><span align="right" class=ArticleDate>Tuesday, 8 April 2014</span><br><a class="ArticleTitleGreen" href="mssql_mobile/data_types.html">Data Types</a><br><br></td></tr><tr><td>
<P>(This entry is part of a <A href="mssql_mobile/index.html">series</A>.  The audience: SQL Server developers.  The topic: SQLite on mobile devices.)</P><hr/>

<h2>Different types of, er, types</h2>

<p>At the SQL language level, the biggest difference with SQLite is the way it deals with data types.  There are three main differences to be aware of:</p>

<ol>
<li><p>There are only a few types</p></li>
<li><p>And types are dynamic</p></li>
<li><p>(But not entirely, because they have affinity)</p></li>
<li><p>And type declarations are weird</p></li>
</ol>

<p>Okay, so actually that's FOUR things, not three.  But the third one doesn't
really count, so I'm not feeling terribly obligated to cursor all the way back
up to the top just to fix the word "three".  Let's keep moving.</p>

<h2>Only a few types</h2>

<p>SQLite values can be one of the following types:</p>

<ul>
<li><p>INTEGER</p></li>
<li><p>REAL</p></li>
<li><p>TEXT</p></li>
<li><p>BLOB</p></li>
</ul>

<p>The following table shows roughly how these compare to SQL Server types:</p>

<table border="1" cellpadding="2">
<tr>
<th>SQL Server</th>
<th>SQLite</th>
<th>Notes</th>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>tinyint</tt></td></tr>
    <tr><td><tt>smallint</tt></td></tr>
    <tr><td><tt>int</tt></td></tr>
    <tr><td><tt>bigint</tt></td></tr>
    <tr><td><tt>bit</tt></td></tr>
    </table>
</td>
<td>
<tt>INTEGER</tt>
</td>
<td>
In SQLite, all integers are up to 64 bits wide (like <tt>bigint</tt>), but smaller values are stored more efficiently.
</td>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>real</tt></td></tr>
    <tr><td><tt>float</tt></td></tr>
    </table>
</td>
<td>
<tt>REAL</tt>
</td>
<td>
In SQLite, all floating point numbers are 64 bits wide.
</td>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>char</tt></td></tr>
    <tr><td><tt>varchar</tt></td></tr>
    <tr><td><tt>nchar</tt></td></tr>
    <tr><td><tt>nvarchar</tt></td></tr>
    <tr><td><tt>text</tt></td></tr>
    <tr><td><tt>ntext</tt></td></tr>
    </table>
</td>
<td>
<tt>TEXT</tt>
</td>
<td>
In SQLite, all strings are Unicode, and it doesn't care about widths on TEXT columns.
</td>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>binary</tt></td></tr>
    <tr><td><tt>varbinary</tt></td></tr>
    <tr><td><tt>image</tt></td></tr>
    </table>
</td>
<td>
<tt>BLOB</tt>
</td>
<td>
Width doesn't matter here either.
</td>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>decimal</tt></td></tr>
    <tr><td><tt>numeric</tt></td></tr>
    <tr><td><tt>money</tt></td></tr>
    <tr><td><tt>smallmoney</tt></td></tr>
    </table>
</td>
<td>
<tt>INTEGER ?</tt>
</td>
<td>
These are problematic, as SQLite 3 does not have a fixed point type.
(In Zumero, we handle synchronization of these by mapping them to INTEGER
and handling the scaling.)
</td>
</tr>

<tr>
<td>
    <table>
    <tr><td><tt>date</tt></td></tr>
    <tr><td><tt>datetime</tt></td></tr>
    <tr><td><tt>datetime2</tt></td></tr>
    <tr><td><tt>datetimeoffset</tt></td></tr>
    <tr><td><tt>smalldatetime</tt></td></tr>
    <tr><td><tt>time</tt></td></tr>
    </table>
</td>
<td>
<tt>(your choice)</tt>
</td>
<td>
SQLite has no data types for dates or times.  However, it does have a rich
set of <a href="http://sqlite.org/lang_datefunc.html">built-in functions</a> for manipulating date/time values represented as
text (ISO-8601 format), integer (unix time) or real (Julian day).
</td>
</tr>

</table>

<h2>Types are dynamic</h2>

<p>In SQL Server, the columns in a table are strictly typed.  If you define a
column to be of type smallint, then every value in that column must be a 16 bit
signed integer.</p>

<p>In contrast, SQLite's approach might be called "dynamic
typing".  Quoting from its own <a
href="http://www.sqlite.org/datatype3.html">documentation</a>:  "In SQLite, the
datatype of a value is associated with the value itself, not with its
container."</p>

<p>For example, the following code will fail on SQL Server:</p>

<pre class="screen">
CREATE TABLE [foo] (a smallint);
INSERT INTO [foo] (a) VALUES (3);
INSERT INTO [foo] (a) VALUES (3.14);
INSERT INTO [foo] (a) VALUES ('pi');
</pre>

<p>But on SQLite, it will succeed.  The value in the first row is an INTEGER.
The value in the second row is a REAL.  The value in the third row is a TEXT
string.</p>

<pre class="screen">
sqlite&gt; SELECT a, typeof(a) FROM foo;
3|integer
3.14|real
pi|text
</pre>

<p>The column [a] is a container that simply doesn't care what you place in it.</p>

<h2>Type affinity</h2>

<p>Well, actually, it does care.  A little.</p>

<p>A SQLite column does not have a
type <i>requirement</i>, but it does have a type <i>preference</i>, called an affinity.  I'm
not going to reiterate the type affinity <a
    href="http://www.sqlite.org/datatype3.html">rules</a> from the SQLite
website here.  Suffice it to say that sometimes SQLite will change the 
type of a value to fit match the affinity of the column, but you probably
don't need to know this, because:</p>

<ul>
    <li><p>If you declare of column of type TEXT and always insert TEXT into it, nothing weird will happen.</p></li>
    <li><p>If you declare of column of type INTEGER and always insert INTEGER into it, nothing weird will happen.</p></li>
    <li><p>If you declare of column of type REAL and always insert REAL into it, nothing weird will happen.</p></li>
</ul>

<p>In other words, just store values of the type that matches the column.  This
is the way you usually do things anyway.</p>

<h2>Type declarations are weird</h2>

<p>In a column declaration, SQLite has a rather <a href="http://www.sqlite.org/datatype3.html">funky</a> set of rules for how it parses the type.  It uses these rules to try its very best to Do The Right Thing when somebody ports SQL code from another database.</p>

<p>For example, all of the columns in the following table end up with TEXT
affinity, which is probably what was intended:</p>

<pre class="screen">
CREATE TABLE [foo] 
(
[a] varchar(50),
[b] char(5),
[c] nchar,
[d] nvarchar(5),
[e] nvarchar(max),
[f] text
);
</pre>

<p>But in some cases, the rules are funky.  Here are more declarations which all
end up with TEXT affinity, even though none of them look right:</p>

<pre class="screen">
CREATE TABLE [foo] 
(
[a] characters,
[b] textish,
[c] charbroiled,
[d] context
);
</pre>

<p>And if you want to be absurd, SQLite will let you.  Here's an example of a declaration of a column with INTEGER affinity:</p>

<pre class="screen">
CREATE TABLE [foo] 
(
[d] My wife and I went to Copenhagen a couple weeks ago
    to celebrate our wedding anniversary 
    and I also attended SQL Saturday while I there
    and by the way we saw
    Captain America The Winter Soldier 
    there as well which means I got to see it 
    before all my friends back here in Illinois 
    and the main reason this blog entry is late is 
    because I spent most of the following week gloating
);
</pre>

<p>SQLite will accept nearly anything as a type name.  Column [d] ends up
being an INTEGER because its ridiculously long type name contains the characters "INT" (in "Winter
Soldier").</p>

<p>Perhaps we can agree that this "feature" could be easily abused.</p>

<p>There are only four types anyway.  Pick a name for each type and stick to it.  
Once again, the official names are:</p>

<ul>
<li><p>INTEGER</p></li>
<li><p>REAL</p></li>
<li><p>TEXT</p></li>
<li><p>BLOB</p></li>
</ul>

<p>(If you want a little more latitude, you can use INT for INTEGER.  Or VARCHAR
for TEXT.  But don't stray very far, mkay?)</p>

<p>Pretend like these are the only four things that SQLite will allow, and then it
will never surprise you.</p>

<h2>Summary</h2>

<p>
SQLite handles types very differently from SQL Server, but its approach is mostly a superset of your
existing habits.  The
differences explained above might look like a big deal, but in practice, they probably won't affect you
all that much.
</p>

<p>&nbsp;</p>


<P> </td></tr> <tr><td>&nbsp;</td></tr><tr><td bgcolor="white">
</td></tr>
</table>
</div>
</td>
<td width="21" bgcolor="white">&nbsp;</td>
</tr>
<tr bgcolor="#00244d"><td colspan="5" class="Copyright">Copyright 2001-2014 Eric Sink. All Rights Reserved</td>
<td align="right">&nbsp;</td>
</tr>
</table>
</td>
</tr>
</body></html>

