
jekyll layout inheritance ?

are the front matter variable names finalized?
    datefiled

scm/index.html has {{{include

review all TODO in the code

we should be pretty close to being ready to rm csgen.
not even sure it works anymore.

article.title is dorky because its value includes
markup.  it should either have the markup in the
template, or the title/date should go in the content.
nice thing about having it in the template is it
standardizes the title and date at the top of every
entry.

maybe things without a title should just have a different
template?

shouldn't things without a title still show the date?

once everything with h is clean, commit c1
to the repo and deploy to s3

for the items harvested only from blog_live (missing
from the esbma.json), the links do not get pre-crunched
to be path-absolute.  which is fine for the actual
file in its original path, but the links break when
they go in the rss.  example:  the sqlite android n
item has a link to the multiple sqlite problem item.

--

what to do about the print- items?

link to blog repo on github, issues, pull requests,
etc

redo front page.  no more complete copies of
recent items.  each item appears on its own page.

responsive:  get rid of sidebar?  just a header
and footer?

need link checking, for within-the-site links,
just to make sure they actually go somewhere

--

investigate fornax

--

autogen dsl

viewmodels, but maybe not using the term
the way everyone else does.  all rx.

validators

layout completely separate layer

XF but mostly doesn't know, no XAML,
no binding

viewmodel invocations.  no implicit back
stack.  name + params.  params are checked
and type-checked.  catch errors earlier.

props with origins, merging, fix ordering
and race problems with init vs set

sqlite on the client, of course  :-)

postgres on the server

query server, subscribe to queries

state of each client db instance kept on server

scale out not up

websockets, persistent connections

other plain rest, but same msg format

DI, but plain, no container

testing with a fake implementation of XF

in rxui, everything is a prop first and reflection
is used to make it observable.  WhenAnyValue.  in my
approach, the observable is first-class and the prop
nature is secondary.


